이항 계수 : 두 개의 항(이항)을 전개하여 계수로 나타낸 것

           쉽게 말하면, (a + b)^n 을 전개했을 때 계수를 의미함

 
(a + b)^2 = a2 + 2ab + b2 이고, 계수는 {1, 2, 1} 이다.

(a + b)^3 = a3 + 3a2b + 3ab2 + b3 이고, 계수는 {1, 3, 3, 1} 이다.

         1
        1 1
       1 2 1
      1 3 3 1
     1 4 6 4 1
   1 5 10 10 5 1
  1 6 15 20 15 6 1
 1 7 21 35 35 21 7 1

  [파스칼의 삼각형]

 

 이항 계수는 n승에 대해 전개하면 다음과 같은 '항'이 나타난다.

(a + b)n = {anb0, an-1b1, an-2b2, ⋯ , an-rbr, ⋯ , a2bn-2. a1bn-1, a0bn}

즉, b가 n개 있을 때 n개 중에서 r개를 뽑는다는 것이다.

조합 공식으로, 계수는 nCr 이 된다.


 ``` JAVA ```

// 풀이 1

main {
	print(factorial(N) / (factorial(K) * factorial(N - K)));
}
 
int factorial(int N) {
	if(N == 0) {
		return 1;
	}
	return N * factorial(N - 1);
}

```


 ``` JAVA ```

// 풀이 2

main {
	print(BC(N, K));
}
 
int BC(int N, int K) {
 
	if(N == K || K == 0) {
		return 1;
	}
	return BC(N - 1, K - 1) + BC(N - 1, K);
}

```
 
 
풀이 2로 풀 경우 문제가 하나 있다. 재귀를 사용하여 '부분 문제'를 풀 경우 중복되는 부분 문제더라도 또 다시 풀어야 한다는 점이다.

결국 재귀로 서브 문제에 대해 풀 경우 memoization(메모이제이션)을 하지 않으면 함수의 성능이 떨어지기 때문에,

이미 풀었던 경우는 메모이제이션을 해주어야 좀 더 효율이 좋은 함수를 만들 수 있다.


즉, 동적계획법을 이용하는 것이다.


  ``` JAVA ```

// 풀이 3
 
int[][] dp = new int[N + 1][K + 1];
 
main {
	print(BC(N, K));
}
 
int BC(int N, int K) {
 
	if(dp[N][K] > 0) {
		return dp[N][K];
	}
	if(N == K || K == 0) {
		return dp[N][K] = 1;
	}
	return dp[N][K] = BC(N - 1, K - 1) + BC(N - 1, K);
}

```
 
